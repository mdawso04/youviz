# Generated by Django 4.1.4 on 2024-05-25 03:52

from django.db import migrations
from random import randint


def build_perms(apps, schema_editor):
    # We can't import the Person model directly as it may be a newer
    # version than this migration expects. We use the historical version.
    
    #build perms
    Permission = apps.get_model("auth", "Permission")
    ContentType = apps.get_model("contenttypes", "ContentType")
    Datasource = apps.get_model("projects", "Datasource")
    Profile = apps.get_model("projects", "Profile")
    Activity = apps.get_model("projects", "Activity")
    Datastream = apps.get_model("projects", "Datastream")
    
    view_published_datasource_perm = Permission.objects.create(
        name='View published datasource',
        content_type=ContentType.objects.get_for_model(Datasource),
        codename='view_published_datasource',
    )
    view_datasource_perm = Permission.objects.create(
        name='View datasource',
        content_type=ContentType.objects.get_for_model(Datasource),
        codename='view_datasource'
    )
    change_datasource_perm = Permission.objects.create(
        name='Change datasource',
        content_type=ContentType.objects.get_for_model(Datasource),
        codename='change_datasource'
    )
    delete_datasource_perm = Permission.objects.create(
        name='Delete datasource',
        content_type=ContentType.objects.get_for_model(Datasource),
        codename='delete_datasource'
    )
    change_activity_perm = Permission.objects.create(
        name='Change activity',
        content_type=ContentType.objects.get_for_model(Activity),
        codename='change_activity'
    )
    view_profile_perm = Permission.objects.create(
        name='View profile',
        content_type=ContentType.objects.get_for_model(Profile),
        codename='view_profile'
    )
    change_profile_perm = Permission.objects.create(
        name='Change profile',
        content_type=ContentType.objects.get_for_model(Profile),
        codename='change_profile'
    )
    add_datasource_perm = Permission.objects.create(
        name='Add datasource',
        content_type=ContentType.objects.get_for_model(Datasource),
        codename='add_datasource'
    )
    add_datastream_perm = Permission.objects.create(
        name='Add datastream',
        content_type=ContentType.objects.get_for_model(Datastream),
        codename='add_datastream'
    )
    
def build_groups_and_users(apps, schema_editor):
    # We can't import the Person model directly as it may be a newer
    # version than this migration expects. We use the historical version.
    
    #create system user to use as owner for backend baseobjects (non-superuser)    
    User = apps.get_model("auth", "User")
    email = f'user{randint(1, 99999)}@example.com'
    password = User.objects.make_random_password()
    system_user = User.objects.create_user(
        username='system',
        email=email,
        password=password)
    
    #create groups
    Group = apps.get_model("auth", "Group")
    site_allusers = Group.objects.create(name='site_allusers')
    site_registeredusers = Group.objects.create(name='site_registeredusers')
    site_powerusers = Group.objects.create(name='site_powerusers')
    datasource_owners = Group.objects.create(name='datasource_owners')
    datasource_managers = Group.objects.create(name='datasource_managers')
    datasource_collaborators = Group.objects.create(name='datasource_collaborators')

    
from django.apps import apps as django_apps
from django.db.models.signals import post_migrate
def guardian_post_migrate_signal(apps, schema_editor):
    guardian_config = django_apps.get_app_config('guardian')
    post_migrate.send(
        sender=guardian_config,
        app_config=guardian_config,
        verbosity=2,
        interactive=False,
        using=schema_editor.connection.alias,
    )
    
def assign_perms(apps, schema_editor):
    
    #fetch perms
    Permission = apps.get_model("auth", "Permission")
    view_published_datasource_perm = Permission.objects.get(codename='view_published_datasource')
    view_datasource_perm = Permission.objects.get(codename='view_datasource')
    change_datasource_perm = Permission.objects.get(codename='change_datasource')
    delete_datasource_perm = Permission.objects.get(codename='delete_datasource')
    change_activity_perm = Permission.objects.get(codename='change_activity')
    view_profile_perm = Permission.objects.get(codename='view_profile')
    change_profile_perm = Permission.objects.get(codename='change_profile')
    add_datasource_perm = Permission.objects.get(codename='add_datasource')
    add_datastream_perm = Permission.objects.get(codename='add_datastream')
    
    #fetch groups
    Group = apps.get_model("auth", "Group")
    site_allusers = Group.objects.get(name='site_allusers')
    site_registeredusers = Group.objects.get(name='site_registeredusers')
    site_powerusers = Group.objects.get(name='site_powerusers')
    datasource_owners = Group.objects.get(name='datasource_owners')
    datasource_managers = Group.objects.get(name='datasource_managers')
    datasource_collaborators = Group.objects.get(name='datasource_collaborators')
    
    site_allusers.permissions.add(view_published_datasource_perm.pk)
    site_registeredusers.permissions.add(
        change_activity_perm.pk,
        view_profile_perm.pk,
        change_profile_perm.pk,
        add_datasource_perm.pk,
    )
    site_powerusers.permissions.add(add_datastream_perm.pk)
    datasource_owners.permissions.add(
        view_datasource_perm.pk,
        change_datasource_perm.pk,
        delete_datasource_perm.pk,
    )
    datasource_managers.permissions.add(
        view_datasource_perm.pk,
        change_datasource_perm.pk,
        delete_datasource_perm.pk,
    )
    datasource_collaborators.permissions.add(
        view_datasource_perm.pk,
        change_datasource_perm.pk,
    )
    
    
    #assign group to GuardianUser
    User = apps.get_model("auth", "User")
    guardian_user = User.objects.get(username='GuardianUser')
    guardian_user.groups.add(site_allusers)
    
def build_covers(apps, schema_editor):
    # We can't import the Person model directly as it may be a newer
    # version than this migration expects. We use the historical version.
    
    User = apps.get_model("auth", "User")
    system_user = User.objects.get(username='system')
    
    #create groups
    Cover = apps.get_model("projects", "Cover")
    default_cover = Cover.objects.create(
        name='_default',
        description='_default',
        slug='_default',
        owner=system_user,
        search_terms='_default',
    )
    business_cover = Cover.objects.create(
        name='Business',
        description='Business',
        slug='business',
        owner=system_user,
        search_terms='business,employee,work,attrition,turnover',
    )
    society_cover = Cover.objects.create(
        name='Society',
        description='Society',
        slug='society',
        owner=system_user,
        search_terms='society,population,',
    )
    health_cover = Cover.objects.create(
        name='Health',
        description='Health',
        slug='health',
        owner=system_user,
        search_terms='health,covid,sick,disease,death,accident,injur',
    )
    education_cover = Cover.objects.create(
        name='Education',
        description='Education',
        slug='education',
        owner=system_user,
        search_terms='education,univerity,school,learn',
    )
    
def build_datastreams(apps, schema_editor):
    # We can't import the Person model directly as it may be a newer
    # version than this migration expects. We use the historical version.
    
    User = apps.get_model("auth", "User")
    system_user = User.objects.get(username='system')
    
    Datastream = apps.get_model("projects", "Datastream")
    #create slug manually to use inside migration
    ds1 = Datastream.objects.create(
        name='Synthetic Attrition Data',
        url='https://raw.githubusercontent.com/IBM/employee-attrition-aif360/master/data/emp_attrition.csv',
        owner=system_user,
    )
    
def initialise_datastreams(apps, schema_editor):
    # We can't import the Person model directly as it may be a newer
    # version than this migration expects. We use the historical version.
    
    User = apps.get_model("auth", "User")
    system_user = User.objects.get(username='system')
    Datastream = apps.get_model("projects", "Datastream")
    initial_datastream = Datastream.objects.first()
    
    import pp
    a = pp.App(initial_datastream.json)
    df = a.call()
    data = df.to_csv(index=False)
    
    Datapod = apps.get_model("projects", "Datapod")
    Datapod.objects.create(
        datastream=initial_datastream,
        data=data,
        owner='system',
    )
    
    initial_datastream.last_cached = initial_datastream.last_updated
    initial_datastream.save()

def build_settings(apps, schema_editor):
    # We can't import the Person model directly as it may be a newer
    # version than this migration expects. We use the historical version.
    
    #User = apps.get_model("auth", "User")
    #system_user = User.objects.get(username='system')
    
    Settings = apps.get_model("projects", "Settings")
    settings = Settings.objects.create(
        json={
            "sitename": "YouViz", 
            "sitedesc": "The free web app where you can Find, Visualise and Share Open Data", 
            "sitewelcome": {
                "topline": "Welcome to YouViz!", 
                "subline": "Search, Vizualize and Share Open Data for Free"
            }
        },
    )
    
def build_notifications(apps, schema_editor):
    # We can't import the Person model directly as it may be a newer
    # version than this migration expects. We use the historical version.
    
    #User = apps.get_model("auth", "User")
    #system_user = User.objects.get(username='system')
    
    Notification = apps.get_model("projects", "Notification")
    view_ad = Notification.objects.create(
        title='View ad',
        html='Block content',
    )
    
class Migration(migrations.Migration):

    dependencies = [
        ("projects", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(build_perms),
        migrations.RunPython(build_groups_and_users),
        migrations.RunPython(guardian_post_migrate_signal),
        migrations.RunPython(assign_perms),
        migrations.RunPython(build_covers),
        migrations.RunPython(build_datastreams),
        migrations.RunPython(initialise_datastreams),
        migrations.RunPython(build_settings),
        migrations.RunPython(build_notifications),
    ]
